package theory_test

import (
	"fmt"
	"testing"

	"github.com/craiggwilson/songtool/pkg/theory"
	"github.com/craiggwilson/songtool/pkg/theory/chord"
	"github.com/craiggwilson/songtool/pkg/theory/interval"
	"github.com/craiggwilson/songtool/pkg/theory/note"
	"github.com/stretchr/testify/require"
)

func TestRoundtripChord(t *testing.T) {
	testCases := []struct {
		chord    chord.Chord
		subset   bool
		expected string
	}{
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(2),
				interval.Perfect(4),
			),
			expected: "C",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Minor(2),
				interval.Perfect(4),
			),
			expected: "Cm",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Perfect(4),
			),
			expected: "C5",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Minor(2),
				interval.Diminished(4, 1),
			),
			expected: "Cdim",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Minor(2),
				interval.Diminished(4, 1),
				interval.Minor(6),
			),
			expected: "Cm7b5",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Minor(2),
				interval.Diminished(4, 1),
				interval.Diminished(6, 1),
			),
			expected: "Cdim7",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Perfect(3),
				interval.Perfect(4),
			),
			expected: "Csus",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(1),
				interval.Perfect(4),
			),
			expected: "C2",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(2),
				interval.Perfect(4),
				interval.Major(5),
			),
			expected: "C6",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Minor(2),
				interval.Perfect(4),
				interval.Major(5),
			),
			expected: "Cm6",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(2),
				interval.Perfect(4),
				interval.Major(5),
				interval.Major(8),
			),
			expected: "C6add9",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Minor(2),
				interval.Perfect(4),
				interval.Major(5),
				interval.Major(8),
			),
			expected: "Cm6add9",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(1),
				interval.Major(2),
				interval.Perfect(4),
			),
			expected: "Cadd2",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(1),
				interval.Minor(2),
				interval.Perfect(4),
			),
			expected: "Cmadd2",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(2),
				interval.Perfect(3),
				interval.Perfect(4),
			),
			expected: "Cadd4",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Minor(2),
				interval.Perfect(3),
				interval.Perfect(4),
			),
			expected: "Cmadd4",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(2),
				interval.Perfect(4),
				interval.Major(8),
			),
			expected: "Cadd9",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Minor(2),
				interval.Perfect(4),
				interval.Major(8),
			),
			expected: "Cmadd9",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(2),
				interval.Perfect(4),
				interval.Perfect(10),
			),
			expected: "Cadd11",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(2),
				interval.Perfect(4),
				interval.Major(12),
			),
			expected: "Cadd13",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(2),
				interval.Perfect(4),
				interval.Major(6),
			),
			expected: "Cmaj7",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(2),
				interval.Perfect(4),
				interval.Major(6),
				interval.Major(8),
			),
			expected: "Cmaj9",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(2),
				interval.Perfect(4),
				interval.Major(6),
				interval.Major(8),
				interval.Perfect(10),
			),
			expected: "Cmaj11",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(2),
				interval.Perfect(4),
				interval.Major(6),
				interval.Perfect(10),
			),
			subset:   true,
			expected: "Cmaj11",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(2),
				interval.Perfect(4),
				interval.Major(6),
				interval.Major(8),
				interval.Perfect(10),
				interval.Major(12),
			),
			expected: "Cmaj13",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(2),
				interval.Perfect(4),
				interval.Major(6),
				interval.Major(12),
			),
			subset:   true,
			expected: "Cmaj13",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Minor(2),
				interval.Perfect(4),
				interval.Minor(6),
			),
			expected: "Cm7",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Minor(2),
				interval.Perfect(4),
				interval.Minor(6),
				interval.Major(8),
			),
			expected: "Cm9",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Minor(2),
				interval.Perfect(4),
				interval.Minor(6),
				interval.Major(8),
				interval.Perfect(10),
			),
			expected: "Cm11",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Minor(2),
				interval.Perfect(4),
				interval.Minor(6),
				interval.Perfect(10),
			),
			subset:   true,
			expected: "Cm11",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Minor(2),
				interval.Perfect(4),
				interval.Minor(6),
				interval.Major(8),
				interval.Perfect(10),
				interval.Major(12),
			),
			expected: "Cm13",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Minor(2),
				interval.Perfect(4),
				interval.Minor(6),
				interval.Major(12),
			),
			subset:   true,
			expected: "Cm13",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Perfect(3),
				interval.Perfect(4),
				interval.Minor(6),
			),
			expected: "C7sus",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Perfect(3),
				interval.Perfect(4),
				interval.Minor(6),
				interval.Major(8),
			),
			expected: "C9sus",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Minor(2),
				interval.Perfect(4),
				interval.Minor(5),
			),
			expected: "Cmb6",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(2),
				interval.Augmented(4, 1),
			),
			expected: "Caug",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(2),
				interval.Diminished(4, 1),
				interval.Minor(6),
			),
			expected: "C7b5",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(2),
				interval.Diminished(4, 1),
				interval.Major(6),
			),
			expected: "Cmaj7b5",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(2),
				interval.Perfect(4),
				interval.Minor(6),
				interval.Minor(8),
			),
			expected: "C7b9",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(2),
				interval.Perfect(4),
				interval.Minor(6),
				interval.Augmented(8, 1),
			),
			expected: "C7#9",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(2),
				interval.Diminished(4, 1),
				interval.Minor(6),
				interval.Augmented(8, 1),
			),
			expected: "C7b5#9",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(2),
				interval.Augmented(4, 1),
				interval.Minor(6),
				interval.Minor(8),
				interval.Augmented(10, 1),
			),
			expected: "Caug7b9#11",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(2),
				interval.Perfect(4),
				interval.Minor(6),
				interval.Minor(8),
				interval.Major(12),
			),
			subset:   true,
			expected: "C13b9",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(2),
				interval.Perfect(4),
				interval.Minor(6),
				interval.Augmented(8, 1),
				interval.Major(12),
			),
			subset:   true,
			expected: "C13#9",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(2),
				interval.Perfect(4),
				interval.Major(5),
				interval.Major(8),
				interval.Augmented(10, 1),
			),
			expected: "C6add9#11",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(2),
				interval.Perfect(4),
				interval.Minor(8),
			),
			expected: "C(b9)",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Major(2),
				interval.Augmented(4, 1),
				interval.Major(6),
			),
			subset:   true,
			expected: "Cmaj7#5",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Minor(2),
				interval.Perfect(4),
				interval.Major(6),
			),
			expected: "Cmmaj7",
		},
		{
			chord: chord.New(note.C, nil,
				interval.Perfect(0),
				interval.Minor(2),
				interval.Perfect(4),
				interval.Minor(5),
				interval.Major(6),
			),
			expected: "Cmmaj7b6",
		},
	}

	for _, tc := range testCases {
		t.Run(fmt.Sprint(tc.expected, " ", tc.chord.Intervals()), func(t *testing.T) {
			actual := theory.NameChord(tc.chord)
			require.Equal(t, tc.expected, actual)

			parsed, err := theory.ParseChord(actual)
			require.Nil(t, err)
			if !tc.subset {
				require.EqualValues(t, tc.chord.Intervals(), parsed.Intervals())
			} else {
				require.Subset(t, parsed.Intervals(), tc.chord.Intervals())
			}
		})
	}
}
